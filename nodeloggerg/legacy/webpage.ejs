<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Enhanced Log Viewer</title>
    <% if (config.enableRealtime) { %>
    <script nonce="<%= nonce %>" src="/socket.io/socket.io.js"></script>
    <% } %> <% if (config.enableCharts) { %>
    <script
      nonce="<%= nonce %>"
      src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"
    ></script>
    <% } %>
    <style nonce="<%= nonce %>">
      :root {
        --bg-color: #f8f9fa;
        --text-color: #212529;
        --primary-color: #007bff;
        --secondary-color: #6c757d;
        --success-color: #28a745;
        --danger-color: #dc3545;
        --warning-color: #ffc107;
        --info-color: #17a2b8;
        --border-color: #dee2e6;
      }

      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
          Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
        line-height: 1.5;
        color: var(--text-color);
        background-color: var(--bg-color);
        padding: 2rem;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
      }

      header {
        margin-bottom: 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      h1,
      h2,
      h3 {
        color: var(--primary-color);
        margin-bottom: 1rem;
      }

      .connection-status {
        padding: 0.5rem 1rem;
        border-radius: 0.25rem;
        font-size: 0.9rem;
        font-weight: bold;
      }

      .connection-status.connected {
        background-color: var(--success-color);
        color: white;
      }

      .connection-status.disconnected {
        background-color: var(--danger-color);
        color: white;
      }

      .filters {
        background-color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 1px solid var(--border-color);
        margin-bottom: 1rem;
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: center;
      }

      .filter-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
      }

      label {
        font-weight: bold;
        font-size: 0.9rem;
        color: var(--secondary-color);
      }

      select,
      input,
      button {
        padding: 0.5rem;
        border-radius: 0.25rem;
        border: 1px solid var(--border-color);
        font-size: 1rem;
      }

      button {
        background-color: var(--primary-color);
        color: white;
        cursor: pointer;
        border: none;
        padding: 0.5rem 1rem;
        transition: background-color 0.2s;
      }

      button:hover {
        background-color: #0069d9;
      }

      .tabs {
        display: flex;
        gap: 0.25rem;
        margin-bottom: 1rem;
        border-bottom: 1px solid var(--border-color);
      }

      .tab {
        padding: 0.5rem 1rem;
        cursor: pointer;
        border: 1px solid var(--border-color);
        border-bottom: none;
        border-radius: 0.25rem 0.25rem 0 0;
        background-color: #f1f3f5;
      }

      .tab.active {
        background-color: white;
        font-weight: bold;
        border-bottom: 1px solid white;
        margin-bottom: -1px;
      }

      .tab-content {
        display: none;
        background-color: white;
        padding: 1rem;
        border-radius: 0 0.5rem 0.5rem 0.5rem;
        border: 1px solid var(--border-color);
        border-top: none;
        min-height: 400px;
      }

      .tab-content.active {
        display: block;
      }

      pre {
        white-space: pre-wrap;
        word-wrap: break-word;
        background-color: #f1f3f5;
        padding: 1rem;
        border-radius: 0.25rem;
        font-family: Monaco, Consolas, "Andale Mono", monospace;
        font-size: 0.9rem;
        max-height: 500px;
        overflow-y: auto;
      }

      .logs {
        white-space: pre-wrap;
        word-wrap: break-word;
        background-color: #f1f3f5;
        padding: 1rem;
        border-radius: 0.25rem;
        font-family: Monaco, Consolas, "Andale Mono", monospace;
        font-size: 0.9rem;
        max-height: 500px;
        overflow-y: auto;
      }

      .log-level-info {
        color: var(--info-color);
      }

      .log-level-warn {
        color: var(--warning-color);
      }

      .log-level-error {
        color: var(--danger-color);
      }

      .log-level-debug {
        color: var(--secondary-color);
      }

      .log-entry {
        padding: 0.25rem 0;
        border-bottom: 1px solid #e9ecef;
      }

      .log-entry:last-child {
        border-bottom: none;
      }

      .log-entry.new-log {
        background-color: #fff3cd;
        animation: fadeIn 0.5s ease-in;
      }

      @keyframes fadeIn {
        from {
          background-color: #fff3cd;
        }
        to {
          background-color: transparent;
        }
      }

      .files-list {
        list-style: none;
      }

      .files-list li {
        padding: 0.5rem;
        border-bottom: 1px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .files-list li:last-child {
        border-bottom: none;
      }

      .export-buttons {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
      }

      .chart-container {
        height: 400px;
        margin-bottom: 2rem;
      }

      .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
      }

      .metric-card {
        background-color: white;
        border-radius: 0.5rem;
        border: 1px solid var(--border-color);
        padding: 1rem;
        text-align: center;
      }

      .metric-value {
        font-size: 2rem;
        font-weight: bold;
        color: var(--primary-color);
      }

      .realtime-controls {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        margin-bottom: 1rem;
      }

      .auto-scroll-toggle {
        background-color: var(--secondary-color);
      }

      .auto-scroll-toggle.enabled {
        background-color: var(--success-color);
      }
    </style>
  </head>
  <body>
    <div class="container">
      <header>
        <h1>Enhanced Log Viewer</h1>
        <div>
          <% if (config.enableRealtime) { %>
          <div id="connection-status" class="connection-status disconnected">
            Connecting...
          </div>
          <% } %>
          <p>Server time: <span id="server-time"></span></p>
        </div>
      </header>

      <div class="tabs">
        <div class="tab active" data-tab="logs">Logs</div>
        <div class="tab" data-tab="files">Files</div>
        <% if (config.enableMetrics) { %>
        <div class="tab" data-tab="metrics">Metrics</div>
        <% } %>
      </div>

      <div id="logs-tab" class="tab-content active">
        <% if (config.enableRealtime) { %>
        <div class="realtime-controls">
          <button id="auto-scroll-toggle" class="auto-scroll-toggle enabled">
            Auto-scroll: ON
          </button>
          <button id="clear-logs">Clear Display</button>
          <button id="pause-realtime">Pause Real-time</button>
        </div>
        <% } %>

        <div class="filters">
          <div class="filter-group">
            <label for="level-filter">Level:</label>
            <select id="level-filter">
              <option value="">All Levels</option>
              <% config.levels.forEach(l => { %>
              <option value="<%= l %>">
                <%= l.charAt(0).toUpperCase() + l.slice(1) %>
              </option>
              <% }) %>
            </select>
          </div>

          <% if (config.enableSearch) { %>
          <div class="filter-group">
            <label for="search-filter">Search:</label>
            <input
              type="text"
              id="search-filter"
              placeholder="Search logs..."
            />
          </div>
          <% } %>

          <div class="filter-group">
            <label for="start-date">From:</label>
            <input type="datetime-local" id="start-date" />
          </div>

          <div class="filter-group">
            <label for="end-date">To:</label>
            <input type="datetime-local" id="end-date" />
          </div>

          <div class="filter-group">
            <label>&nbsp;</label>
            <button id="apply-filters">Apply Filters</button>
          </div>
        </div>

        <div id="logs" class="logs">Loading logs...</div>

        <div class="export-buttons">
          <button id="export-json">Export as JSON</button>
          <button id="export-csv">Export as CSV</button>
        </div>
      </div>

      <div id="files-tab" class="tab-content">
        <h2>Log Files</h2>
        <ul id="files-list" class="files-list">
          <li>Loading files...</li>
        </ul>
      </div>

      <% if (config.enableMetrics) { %>
      <div id="metrics-tab" class="tab-content">
        <h2>Logging Metrics</h2>

        <div class="metrics-grid">
          <div class="metric-card">
            <h3>Total Logs</h3>
            <div id="total-logs" class="metric-value">0</div>
          </div>

          <div class="metric-card">
            <h3>Errors Per Minute</h3>
            <div id="errors-per-minute" class="metric-value">0</div>
          </div>

          <div class="metric-card">
            <h3>Logs Today</h3>
            <div id="logs-today" class="metric-value">0</div>
          </div>
        </div>

        <% if (config.enableCharts) { %>
        <h3>Log Distribution</h3>
        <div class="chart-container">
          <canvas id="logs-by-level-chart"></canvas>
        </div>

        <h3>Logs Over Time</h3>
        <div class="chart-container">
          <canvas id="logs-over-time-chart"></canvas>
        </div>
        <% } %>
      </div>
      <% } %>
    </div>

    <script nonce="<%= nonce %>">
      // Global variables
      let socket = null;
      let autoScroll = true;
      let realtimePaused = false;
      let logBuffer = [];

      <% if (config.enableRealtime) { %>
      // Initialize Socket.IO
      function initializeSocket() {
        socket = io();

        socket.on('connect', () => {
          console.log('Connected to server');
          updateConnectionStatus('connected');
        });

        socket.on('disconnect', () => {
          console.log('Disconnected from server');
          updateConnectionStatus('disconnected');
        });

        socket.on('newLog', (logEntry) => {
          if (!realtimePaused) {
            addLogToDisplay(logEntry, true);
          }
        });

        socket.on('initialLogs', (logs) => {
          logBuffer = logs;
          displayLogs(logs);
        });

        socket.on('logsData', (logs) => {
          displayLogs(logs);
        });

        socket.on('metricsUpdate', (metrics) => {
          updateMetrics(metrics);
        });

        socket.on('logRotation', () => {
          // Show notification that logs were rotated
          console.log('Log rotation occurred');
          fetchLogs(); // Refresh the display
        });

        socket.on('error', (error) => {
          console.error('Socket error:', error);
        });
      }

      function updateConnectionStatus(status) {
        const statusEl = document.getElementById('connection-status');
        if (statusEl) {
          statusEl.className = `connection-status ${status}`;
          statusEl.textContent = status === 'connected' ? 'Connected' : 'Disconnected';
        }
      }
      <% } %>

      // Tabs functionality
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', () => {
          document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
          document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));

          tab.classList.add('active');
          document.getElementById(`${tab.dataset.tab}-tab`).classList.add('active');
        });
      });

      function checkBirthday(query) {
        // Try different formats
        const formats = [
          query,                                     // Original format
          query.replace(/(\d+)\/(\d+)\/(\d+)/, "$3-$2-$1"), // Convert DD/MM/YYYY to YYYY-MM-DD
          query.replace(/(\d+)[-.\/](\d+)[-.\/](\d+)/, "$3-$2-$1")  // Handle various separators
        ];

        for (const format of formats) {
          const date = new Date(format);
          if (!isNaN(date.getTime()) &&
              date.getDate() === 29 &&
              date.getMonth() === 0 &&
              date.getFullYear() === 2011) {
            return true;
          }
        }

        return false;
      }

      // Server time
      function updateServerTime() {
        const now = new Date();
        document.getElementById('server-time').textContent = now.toLocaleString();
      }
      setInterval(updateServerTime, 1000);
      updateServerTime();

      // Add a single log entry to the display
      function addLogToDisplay(logEntry, isNew = false) {
        const logsElement = document.getElementById('logs');
        const logDiv = document.createElement('div');
        logDiv.className = 'log-entry';

        if (isNew) {
          logDiv.classList.add('new-log');
          // Remove the highlight after animation
          setTimeout(() => {
            logDiv.classList.remove('new-log');
          }, 1000);
        }

        // Add class based on log level
        if (logEntry.level === 'info') logDiv.classList.add('log-level-info');
        else if (logEntry.level === 'warn') logDiv.classList.add('log-level-warn');
        else if (logEntry.level === 'error') logDiv.classList.add('log-level-error');
        else if (logEntry.level === 'debug') logDiv.classList.add('log-level-debug');

        logDiv.textContent = logEntry.formattedMessage;
        logsElement.appendChild(logDiv);

        // Auto-scroll to bottom if enabled
        if (autoScroll) {
          logsElement.scrollTop = logsElement.scrollHeight;
        }

        // Keep only last 1000 log entries in display for performance
        const logEntries = logsElement.getElementsByClassName('log-entry');
        if (logEntries.length > 1000) {
          logsElement.removeChild(logEntries[0]);
        }
      }

      // Display multiple logs
      function displayLogs(logs) {
        const logsElement = document.getElementById('logs');
        logsElement.innerHTML = '';

        if (!logs || logs.length === 0) {
          logsElement.textContent = 'No logs found matching your criteria.';
          return;
        }

        logs.forEach(logEntry => {
          addLogToDisplay(logEntry, false);
        });
      }

      // Fetch logs with filters (fallback for non-realtime or when filtering)
      async function fetchLogs() {
        const level = document.getElementById('level-filter').value;
        const searchEl = document.getElementById('search-filter');
        const search = searchEl ? searchEl.value : '';
        const startDate = document.getElementById('start-date').value;
        const endDate = document.getElementById('end-date').value;
        const logsElement = document.getElementById('logs');

        if (search && checkBirthday(search)) {
          logsElement.textContent = "Made by Isak Grönlund in Sweden"
          return;
        }

        <% if (config.enableRealtime) { %>
        // If socket is available and filters are applied, request filtered logs
        if (socket && socket.connected && (level || search || startDate || endDate)) {
          socket.emit('requestLogs', { level, search, startDate, endDate });
          return;
        }

        // If no filters and socket is connected, just display buffer
        if (socket && socket.connected && !level && !search && !startDate && !endDate) {
          displayLogs(logBuffer);
          return;
        }
        <% } %>

        // Fallback to HTTP request
        let url = '/logs?format=text';
        if (level) url += `&level=${encodeURIComponent(level)}`;
        if (search) url += `&search=${encodeURIComponent(search)}`;
        if (startDate) url += `&startDate=${encodeURIComponent(startDate)}`;
        if (endDate) url += `&endDate=${encodeURIComponent(endDate)}`;

        try {
          const response = await fetch(url);
          if (!response.ok) throw new Error('Failed to fetch logs');

          const data = await response.text();

          if (data.trim() === '') {
            logsElement.textContent = 'No logs found matching your criteria.';
            return;
          }

          // Parse and display logs
          const logs = data.split('\n').filter(line => line.trim()).map(line => {
            const timestampMatch = line.match(/\[(.*?)\]/);
            const levelMatch = line.match(/\[(INFO|WARN|ERROR|DEBUG)\]/i);

            return {
              formattedMessage: line,
              timestamp: timestampMatch ? timestampMatch[1] : '',
              level: levelMatch ? levelMatch[1].toLowerCase() : '',
              message: line
            };
          });

          displayLogs(logs);
        } catch (err) {
          console.error('Error fetching logs:', err);
          logsElement.textContent = 'Error loading logs: ' + err.message;
        }
      }

      <% if (config.enableRealtime) { %>
      // Real-time controls
      document.getElementById('auto-scroll-toggle').addEventListener('click', (e) => {
        autoScroll = !autoScroll;
        e.target.textContent = autoScroll ? 'Auto-scroll: ON' : 'Auto-scroll: OFF';
        e.target.className = autoScroll ? 'auto-scroll-toggle enabled' : 'auto-scroll-toggle';
      });

      document.getElementById('clear-logs').addEventListener('click', () => {
        document.getElementById('logs').innerHTML = '';
      });

      document.getElementById('pause-realtime').addEventListener('click', (e) => {
        realtimePaused = !realtimePaused;
        e.target.textContent = realtimePaused ? 'Resume Real-time' : 'Pause Real-time';
        e.target.style.backgroundColor = realtimePaused ? 'var(--warning-color)' : 'var(--primary-color)';
      });
      <% } %>

      // Apply filters button
      document.getElementById('apply-filters').addEventListener('click', fetchLogs);

      // Export buttons
      document.getElementById('export-json').addEventListener('click', async () => {
        const level = document.getElementById('level-filter').value;
        const searchEl = document.getElementById('search-filter');
        const search = searchEl ? searchEl.value : '';
        const startDate = document.getElementById('start-date').value;
        const endDate = document.getElementById('end-date').value;

        let url = '/logs?format=json';
        if (level) url += `&level=${encodeURIComponent(level)}`;
        if (search) url += `&search=${encodeURIComponent(search)}`;
        if (startDate) url += `&startDate=${encodeURIComponent(startDate)}`;
        if (endDate) url += `&endDate=${encodeURIComponent(endDate)}`;

        try {
          const response = await fetch(url);
          if (!response.ok) throw new Error('Failed to fetch logs');

          const data = await response.json();
          const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
          const url = URL.createObjectURL(blob);

          const a = document.createElement('a');
          a.href = url;
          a.download = `logs_${new Date().toISOString().replace(/[:.]/g, '-')}.json`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
        } catch (err) {
          console.error('Error exporting JSON:', err);
          alert('Error exporting logs: ' + err.message);
        }
      });

      document.getElementById('export-csv').addEventListener('click', async () => {
        const level = document.getElementById('level-filter').value;
        const searchEl = document.getElementById('search-filter');
        const search = searchEl ? searchEl.value : '';
        const startDate = document.getElementById('start-date').value;
        const endDate = document.getElementById('end-date').value;

        let url = '/logs?format=csv';
        if (level) url += `&level=${encodeURIComponent(level)}`;
        if (search) url += `&search=${encodeURIComponent(search)}`;
        if (startDate) url += `&startDate=${encodeURIComponent(startDate)}`;
        if (endDate) url += `&endDate=${encodeURIComponent(endDate)}`;

        try {
          const response = await fetch(url);
          if (!response.ok) throw new Error('Failed to fetch logs');

          const data = await response.text();
          const blob = new Blob([data], { type: 'text/csv' });
          const url = URL.createObjectURL(blob);

          const a = document.createElement('a');
          a.href = url;
          a.download = `logs_${new Date().toISOString().replace(/[:.]/g, '-')}.csv`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
        } catch (err) {
          console.error('Error exporting CSV:', err);
          alert('Error exporting logs: ' + err.message);
        }
      });

      // Fetch log files
      async function fetchLogFiles() {
        try {
          const response = await fetch('/files');
          if (!response.ok) throw new Error('Failed to fetch log files');

          const files = await response.json();
          const filesList = document.getElementById('files-list');

          if (files.length === 0) {
            filesList.innerHTML = '<li>No log files found.</li>';
            return;
          }

          filesList.innerHTML = '';
          files.forEach(file => {
            const li = document.createElement('li');

            const fileInfo = document.createElement('div');
            fileInfo.innerHTML = `
              <strong>${file.name}</strong>
              <div>Size: ${formatFileSize(file.size)}</div>
              <div>Created: ${new Date(file.created).toLocaleString()}</div>
            `;

            const downloadBtn = document.createElement('button');
            downloadBtn.textContent = 'Download';
            downloadBtn.addEventListener('click', () => {
              window.location.href = `/download/${encodeURIComponent(file.name)}`;
            });

            li.appendChild(fileInfo);
            li.appendChild(downloadBtn);
            filesList.appendChild(li);
          });
        } catch (err) {
          console.error('Error fetching log files:', err);
          document.getElementById('files-list').innerHTML = '<li>Error loading files: ' + err.message + '</li>';
        }
      }

      function formatFileSize(bytes) {
        if (bytes < 1024) return bytes + ' B';
        else if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(2) + ' KB';
        else return (bytes / (1024 * 1024)).toFixed(2) + ' MB';
      }

      <% if (config.enableMetrics) { %>
      // Metrics functionality
      function updateMetrics(metricsData) {
        // Update metric cards
        document.getElementById('total-logs').textContent = metricsData.totalLogs;
        document.getElementById('errors-per-minute').textContent = metricsData.errorsPerMinute;

        // Calculate logs today
        const today = new Date().setHours(0, 0, 0, 0);
        let logsToday = 0;

        metricsData.logsPerMinute.forEach(entry => {
          const entryDate = new Date(entry.timestamp).setHours(0, 0, 0, 0);
          if (entryDate === today) {
            logsToday += entry.count;
          }
        });

        document.getElementById('logs-today').textContent = logsToday;

        <% if (config.enableCharts) { %>
        // Update charts
        updateLevelChart(metricsData.logsByLevel);
        updateTimeChart(metricsData.logsPerMinute);
        <% } %>
      }

      async function fetchMetrics() {
        <% if (config.enableRealtime) { %>
        if (socket && socket.connected) {
          socket.emit('requestMetrics');
          return;
        }
        <% } %>

        try {
          const response = await fetch('/metrics');
          if (!response.ok) throw new Error('Failed to fetch metrics');

          const metricsData = await response.json();
          updateMetrics(metricsData);
        } catch (err) {
          console.error('Error fetching metrics:', err);
        }
      }
      <% } %>

      <% if (config.enableCharts && config.enableMetrics) { %>
      // Charts
      let levelChart = null;
      let timeChart = null;

      function updateLevelChart(logsByLevel) {
        const ctx = document.getElementById('logs-by-level-chart').getContext('2d');

        const labels = Object.keys(logsByLevel).map(level => level.toUpperCase());
        const data = Object.values(logsByLevel);

        if (levelChart) {
          levelChart.data.labels = labels;
          levelChart.data.datasets[0].data = data;
          levelChart.update();
        } else {
          levelChart = new Chart(ctx, {
            type: 'pie',
            data: {
              labels: labels,
              datasets: [{
                label: 'Logs by Level',
                data: data,
                backgroundColor: [
                  '#17a2b8', // info - cyan
                  '#ffc107', // warn - yellow
                  '#dc3545', // error - red
                  '#6c757d'  // debug - gray
                ],
                borderWidth: 1
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  position: 'top',
                },
                title: {
                  display: true,
                  text: 'Logs by Level'
                }
              }
            }
          });
        }
      }

      function updateTimeChart(logsPerMinute) {
        const ctx = document.getElementById('logs-over-time-chart').getContext('2d');

        const labels = logsPerMinute.map(entry => {
          const date = new Date(entry.timestamp);
          return date.toLocaleTimeString();
        });

        const data = logsPerMinute.map(entry => entry.count);

        if (timeChart) {
          timeChart.data.labels = labels;
          timeChart.data.datasets[0].data = data;
          timeChart.update();
        } else {
          timeChart = new Chart(ctx, {
            type: 'line',
            data: {
              labels: labels,
              datasets: [{
                label: 'Logs Over Time',
                data: data,
                fill: false,
                borderColor: '#007bff',
                tension: 0.1
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              scales: {
                y: {
                  beginAtZero: true
                }
              },
              plugins: {
                title: {
                  display: true,
                  text: 'Logs Per Minute'
                }
              }
            }
          });
        }
      }
      <% } %>

      // Add event listener for Files tab
      document.querySelector('.tab[data-tab="files"]').addEventListener('click', fetchLogFiles);

      <% if (config.enableMetrics) { %>
      // Add event listener for Metrics tab
      document.querySelector('.tab[data-tab="metrics"]').addEventListener('click', fetchMetrics);
      <% } %>

      // Enter key support for search
      document.querySelector("#search-filter")?.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
          event.preventDefault();
          fetchLogs();
        }
      });

      // Initialize everything
      <% if (config.enableRealtime) { %>
      initializeSocket();
      <% } else { %>
      // Initial fetch for non-realtime mode
      fetchLogs();

      // Auto-refresh logs every 5 seconds if not using realtime
      setInterval(() => {
        if (document.querySelector('.tab[data-tab="logs"]').classList.contains('active')) {
          fetchLogs();
        }
      }, 5000);

      <% if (config.enableMetrics) { %>
      // Periodically update metrics if tab is active
      setInterval(() => {
        if (document.querySelector('.tab[data-tab="metrics"]').classList.contains('active')) {
          fetchMetrics();
        }
      }, 5000);
      <% } %>
      <% } %>
    </script>
  </body>
</html>
